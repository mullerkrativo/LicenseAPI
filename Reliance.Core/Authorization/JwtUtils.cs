//using Clowdr.Core.Interfaces;
//using Clowdr.Core.Utilities.Helpers;
//using Clowdr.Model;
//using Microsoft.AspNetCore.Identity;
//using Microsoft.Extensions.Options;
//using Microsoft.IdentityModel.Tokens;
//using System;
//using System.Collections.Generic;
//using System.IdentityModel.Tokens.Jwt;
//using System.Linq;
//using System.Security.Claims;
//using System.Text;
//using System.Threading.Tasks;

//namespace Clowdr.Service.Authorization
//{
//    public class JwtUtils : IJwtUtils 
//    {
//        private readonly AppSettings _appSettings;

//        public JwtUtils(IOptions<AppSettings> appSettings)
//        {
//            _appSettings = appSettings.Value;
//        }

//        //=> There should be an ApplicationUser generated by ASP.NET DBContext instead of user

//        //=> Comment addressed : Identity User introduced
//        public string GenerateToken(IdentityUser user)
//        {
//            // generate token that is valid for 7 days
//            var tokenHandler = new JwtSecurityTokenHandler();
//            var key = Encoding.ASCII.GetBytes(_appSettings.Secret);
//            var tokenDescriptor = new SecurityTokenDescriptor
//            {
//                Subject = new ClaimsIdentity(new[] { new Claim("id", user.Id.ToString()) }),
//                Expires = DateTime.UtcNow.AddDays(7),
//                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
//            };
//            var token = tokenHandler.CreateToken(tokenDescriptor);
//            return tokenHandler.WriteToken(token);
//        }

//        public int? ValidateToken(string token)
//        {
//            if (token == null)
//                return null;

//            var tokenHandler = new JwtSecurityTokenHandler();
//            var key = Encoding.ASCII.GetBytes(_appSettings.Secret);
//            try
//            {
//                tokenHandler.ValidateToken(token, new TokenValidationParameters
//                {
//                    ValidateIssuerSigningKey = true,
//                    IssuerSigningKey = new SymmetricSecurityKey(key),
//                    ValidateIssuer = false,
//                    ValidateAudience = false,
//                    // set clockskew to zero so tokens expire exactly at token expiration time (instead of 5 minutes later)
//                    ClockSkew = TimeSpan.Zero
//                }, out SecurityToken validatedToken);

//                var jwtToken = (JwtSecurityToken)validatedToken;
//                var userId = int.Parse(jwtToken.Claims.First(x => x.Type == "id").Value);

//                // return user id from JWT token if validation successful
//                return userId;
//            }
//            catch
//            {
//                // return null if validation fails
//                return null;
//            }
//        }
//    }
//}
